# Contract: Installation Script (scripts/install.sh)
# Purpose: Main installation script that orchestrates claude-agent-templates and spec-kit installation

name: install.sh
type: bash_script
version: 1.0

description: >
  Orchestrates the installation of claude-agent-templates and spec-kit with version management.
  Handles fresh installations, upgrades, and rollback on failure.

## Interface

### Command Line

```bash
# Usage
./scripts/install.sh [OPTIONS]

# Examples
./scripts/install.sh                          # Fresh installation
./scripts/install.sh --upgrade                # Upgrade existing installation
./scripts/install.sh --verify                 # Verify current installation
./scripts/install.sh --path /custom/path      # Install to custom location
./scripts/install.sh --help                   # Show help message
```

### Options

options:
  --upgrade:
    description: Upgrade existing installation to latest version
    type: boolean
    default: false

  --verify:
    description: Verify installation integrity without installing
    type: boolean
    default: false

  --path <directory>:
    description: Custom installation directory
    type: string
    default: ~/.claude-agent-templates
    validation: Must be absolute path

  --force:
    description: Force installation even if version conflicts detected
    type: boolean
    default: false

  --no-backup:
    description: Skip backup during upgrade (not recommended)
    type: boolean
    default: false

  --quiet:
    description: Suppress non-error output
    type: boolean
    default: false

  --verbose:
    description: Enable verbose logging
    type: boolean
    default: false

  --help, -h:
    description: Show help message and exit
    type: boolean

### Exit Codes

exit_codes:
  0: Success
  1: General error
  2: Invalid arguments
  3: Version conflict detected
  4: Network error
  5: Permission denied
  6: Installation verification failed
  7: Rollback failed (critical)
  8: Incompatible platform

### Environment Variables

environment:
  INSTALL_DIR:
    description: Installation directory (overridable by --path)
    default: ~/.claude-agent-templates

  SKIP_VERIFICATION:
    description: Skip integrity verification (not recommended)
    default: false

  LOG_LEVEL:
    description: Logging verbosity
    values: [quiet, normal, verbose, debug]
    default: normal

## Functional Requirements

requirements:
  FR-001:
    description: Detect existing installation
    acceptance:
      - Check for ~/.claude-agent-templates directory
      - Check for .version-lock.json file
      - Determine if fresh install or upgrade needed

  FR-002:
    description: Install spec-kit from vendored source
    acceptance:
      - Copy spec-kit files from .specify/ to install directory
      - Verify integrity using SHA-256 hash from manifest
      - Set appropriate file permissions

  FR-003:
    description: Create version lock file
    acceptance:
      - Generate unique installation ID (UUID v4)
      - Record installed versions
      - Record installation timestamp
      - Initialize history with install event

  FR-004:
    description: Handle upgrade scenarios
    acceptance:
      - Backup current installation before upgrade
      - Install new versions
      - Update version lock
      - Rollback on failure

  FR-005:
    description: Verify installation integrity
    acceptance:
      - Check all required files exist
      - Verify SHA-256 hash matches manifest
      - Validate version lock schema
      - Return detailed verification status

  FR-006:
    description: Transactional installation with rollback
    acceptance:
      - Use trap to catch errors
      - Backup before changes
      - Rollback on any failure
      - Clean up temporary files
      - Log all operations

## Data Flows

### Input Data

inputs:
  - source: .specify/version-manifest.json
    description: Pinned spec-kit version and integrity hash
    format: JSON
    required: true

  - source: ~/.claude-agent-templates/.version-lock.json
    description: Existing installation state (upgrade only)
    format: JSON
    required: false (if upgrade)

### Output Data

outputs:
  - destination: ~/.claude-agent-templates/
    description: Installation directory created
    permissions: 755

  - destination: ~/.claude-agent-templates/.version-lock.json
    description: Version lock file
    format: JSON
    permissions: 644

  - destination: ~/.claude-agent-templates/.install-log.txt
    description: Installation activity log
    format: Plain text
    permissions: 644

  - destination: stdout
    description: Installation progress and status messages
    format: Human-readable text

## Error Handling

errors:
  version_conflict:
    condition: Installed spec-kit version incompatible with manifest
    action: Display error with versions and resolution steps
    exit_code: 3
    example: |
      ❌ ERROR: Version conflict detected

        Installed spec-kit: 0.0.68
        Required version: 0.0.72
        Compatible range: 0.0.70 - 0.1.0

      Resolution:
        Run with --upgrade to update spec-kit version

  network_error:
    condition: Unable to download spec-kit (if not vendored)
    action: Display error and suggest offline installation
    exit_code: 4

  permission_denied:
    condition: Insufficient permissions to create installation directory
    action: Display error with suggested resolution
    exit_code: 5
    example: |
      ❌ ERROR: Permission denied

        Cannot create directory: ~/.claude-agent-templates

      Resolution:
        Run: chmod +w ~
        Or: Use --path to specify writable directory

  verification_failed:
    condition: Integrity hash mismatch
    action: Abort installation, display corruption warning
    exit_code: 6
    example: |
      ❌ ERROR: Integrity verification failed

        Expected hash: sha256-abc123...
        Actual hash: sha256-def456...

      This may indicate repository corruption or tampering.
      Resolution:
        1. Re-clone repository
        2. Report issue if problem persists

  rollback_failed:
    condition: Rollback operation fails after installation error
    action: Display critical error, manual intervention required
    exit_code: 7
    example: |
      ❌ CRITICAL ERROR: Rollback failed

        Original error: [installation error]
        Rollback error: [rollback error]

      Manual intervention required:
        1. Remove: ~/.claude-agent-templates
        2. Restore from: ~/.claude-agent-templates.backup.*
        3. Report issue

## State Transitions

states:
  initial:
    next: [checking_prerequisites, showing_help]

  checking_prerequisites:
    actions:
      - Parse command line arguments
      - Check platform compatibility
      - Verify required tools (bash, jq, sha256sum)
    next: [detecting_installation, error]

  detecting_installation:
    actions:
      - Check for existing installation
      - Read version lock if exists
    next: [fresh_install, upgrade, verify_only]

  fresh_install:
    actions:
      - Create installation directory
      - Install spec-kit from vendored source
      - Verify integrity
      - Create version lock
      - Initialize log
    next: [success, rollback]

  upgrade:
    actions:
      - Backup current installation
      - Install new versions
      - Update version lock
      - Append upgrade event to history
    next: [success, rollback]

  verify_only:
    actions:
      - Check file existence
      - Verify integrity hashes
      - Validate version lock
    next: [success, error]

  rollback:
    actions:
      - Restore from backup
      - Clean up partial installation
      - Log rollback event
    next: [error, critical_error]

  success:
    actions:
      - Display success message
      - Show installed versions
      - Clean up backups
    exit_code: 0

  error:
    actions:
      - Display error message
      - Log error details
    exit_code: 1-6

  critical_error:
    actions:
      - Display critical error
      - Provide manual recovery steps
    exit_code: 7

## Testing Contract

tests:
  unit:
    - name: test_parse_arguments
      description: Verify argument parsing handles all options
      inputs:
        - "--upgrade"
        - "--path /tmp/test"
        - "--verify --quiet"
      expected: Correct variable assignments

    - name: test_version_comparison
      description: Verify semantic version comparison logic
      inputs:
        - ["0.0.72", "0.0.70"] -> greater
        - ["0.0.68", "0.0.72"] -> less
        - ["0.0.72", "0.0.72"] -> equal
      expected: Correct comparison results

    - name: test_integrity_verification
      description: Verify SHA-256 hash checking
      inputs:
        - Valid hash + matching files -> pass
        - Valid hash + modified files -> fail
      expected: Correct verification status

  integration:
    - name: test_fresh_install
      description: Complete fresh installation workflow
      setup: Clean system (no existing installation)
      actions:
        - Run ./scripts/install.sh
      expected:
        - Installation directory created
        - Version lock file created
        - Spec-kit files present
        - Exit code 0

    - name: test_upgrade
      description: Upgrade from older version
      setup: Install older version first
      actions:
        - Run ./scripts/install.sh --upgrade
      expected:
        - Backup created
        - New version installed
        - Version lock updated
        - History contains upgrade event
        - Exit code 0

    - name: test_version_conflict
      description: Detect version conflict
      setup: Install incompatible spec-kit version
      actions:
        - Run ./scripts/install.sh
      expected:
        - Error message displayed
        - Exit code 3
        - No changes to installation

    - name: test_rollback_on_failure
      description: Verify rollback after installation failure
      setup: Simulate failure during installation
      actions:
        - Run ./scripts/install.sh (with injected failure)
      expected:
        - Installation reverted
        - Backup restored
        - Error logged
        - Exit code > 0

## Dependencies

internal:
  - ./scripts/check-version.sh: Version compatibility checking
  - .specify/version-manifest.json: Version specifications

external:
  - bash 4.0+: Shell interpreter
  - jq: JSON parsing
  - sha256sum: Integrity verification
  - uuid (uuidgen): Generate installation ID

## Performance Requirements

performance:
  execution_time:
    fresh_install: < 30 seconds
    upgrade: < 60 seconds
    verify: < 5 seconds

  resource_usage:
    disk_space: < 50 MB
    memory: < 10 MB
    network: 0 bytes (vendored installation)

## Security Considerations

security:
  integrity:
    - Verify SHA-256 hash before installation
    - Abort on hash mismatch
    - Log all verification attempts

  permissions:
    - Installation directory: 755
    - Configuration files: 644
    - No executable permissions on data files

  validation:
    - Validate all file paths (prevent directory traversal)
    - Validate JSON against schemas
    - Sanitize user inputs (--path option)

## Examples

### Example 1: Fresh Installation

```bash
$ ./scripts/install.sh

🔍 Checking prerequisites...
  ✓ bash 4.4.20
  ✓ jq 1.6
  ✓ sha256sum available

📦 Installing claude-agent-templates v1.0.0...
  ✓ Creating directory: /home/user/.claude-agent-templates
  ✓ Installing spec-kit v0.0.72 (vendored)
  ✓ Verifying integrity: sha256-abc123...
  ✓ Creating version lock

✅ Installation complete!

Installed versions:
  claude-agent-templates: v1.0.0
  spec-kit: v0.0.72

Run 'check-version.sh' to verify installation.
```

### Example 2: Upgrade

```bash
$ ./scripts/install.sh --upgrade

🔍 Detecting existing installation...
  Current version: v0.9.0
  Latest version: v1.0.0

📦 Upgrading claude-agent-templates...
  ✓ Backing up current installation
  ✓ Installing claude-agent-templates v1.0.0
  ✓ Upgrading spec-kit: 0.0.68 → 0.0.72
  ✓ Verifying integrity
  ✓ Updating version lock

✅ Upgrade complete!

Upgraded components:
  claude-agent-templates: v0.9.0 → v1.0.0
  spec-kit: v0.0.68 → v0.0.72
```

### Example 3: Version Conflict

```bash
$ ./scripts/install.sh

🔍 Detecting existing installation...
  Installed spec-kit: 0.0.68

❌ ERROR: Version conflict detected

  Installed spec-kit: 0.0.68
  Required version: 0.0.72
  Compatible range: 0.0.70 - 0.1.0

Resolution:
  Run: ./scripts/install.sh --upgrade

$ echo $?
3
```

---

**Status**: ✅ Installation script contract complete
